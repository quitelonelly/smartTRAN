import os
from dotenv import load_dotenv
import gspread
from pathlib import Path
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import F, Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import reg_kb, inline_kb

# ID –∞–¥–º–∏–Ω–∞
ADMIN_ID = 894963514

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = "7796843686:AAEXkFreLUqDNzUHIvPp1LmoeIu31kbXWf4"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_telegram_id_by_company_id(sheet, company_id):
    """
    –ò—â–µ—Ç Telegram ID –ø–æ ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ Google Sheets.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID –∫–æ–º–ø–∞–Ω–∏–∏
        for row in all_values:
            if row[0] == str(company_id):  # ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
                return row[1]  # Telegram ID –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
        
        # –ï—Å–ª–∏ ID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ Telegram ID: {e}")
        return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
def setup_google_sheets(sheet_index=0):
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
        "/home/klim-petrov/projects/tgbot/credentials.json", scope
    )
    client = gspread.authorize(creds)
    sheet = client.open_by_key("1CoDQJn0T_scUV7ZsbYU8x2nZTzu_F9CBrculeQIG2KA").get_worksheet(sheet_index)
    return sheet

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ ID
def get_next_id(sheet):
    try:
        ids = sheet.col_values(1)
        if len(ids) > 1:
            last_id = int(ids[-1])
            return last_id + 1
        else:
            return 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID: {e}")
        return 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
def update_conversion_sheet(sheet, argument, column_name):
    try:
        all_values = sheet.get_all_values()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        for i, row in enumerate(all_values):
            if row[0] == argument:
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                column_index = all_values[0].index(column_name)
                current_value = int(row[column_index]) if row[column_index] else 0
                sheet.update_cell(i + 1, column_index + 1, current_value + 1)
                return
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        new_row = [argument] + [0] * (len(all_values[0]) - 1)
        column_index = all_values[0].index(column_name)
        new_row[column_index] = 1
        sheet.append_row(new_row)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_contact = State()
    waiting_for_business_info = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
async def cmd_start(message: types.Message, command: Command, state: FSMContext):
    args = command.args
    
    if args:
        try:
            await message.answer(
                "https://rutube.ru/video/3a0ee47db8e2e0f8a75001fbe618fdd3/", 
                parse_mode="HTML", 
                reply_markup=inline_kb
            )

            sheet = setup_google_sheets()
            next_id = get_next_id(sheet)
            sheet.append_row([next_id, message.from_user.id, args])

            conversion_sheet = setup_google_sheets(1)
            update_conversion_sheet(conversion_sheet, args, "start_clicked")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(argument=args)
            await state.set_state(Form.waiting_for_contact)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")  # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É", parse_mode="HTML")
    else:
        await message.answer("–¢—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –∞—Ä–≥—É–º–µ–Ω—Ç.", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
async def process_registration_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.", 
        reply_markup=reg_kb
    )
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def process_contact(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    argument = user_data.get("argument")

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç! ü§©\n\n–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ. üóí", 
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        conversion_sheet = setup_google_sheets(1)
        update_conversion_sheet(conversion_sheet, argument, "contact_clicked")
        await state.set_state(Form.waiting_for_business_info)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_contact: {e}")  # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
async def process_business_info(message: types.Message, state: FSMContext):
    business_info = message.text
    user_data = await state.get_data()
    argument = user_data.get("argument")

    try:
        sheet = setup_google_sheets()
        all_values = sheet.get_all_values()
        last_row = len(all_values)
        sheet.update_cell(last_row, 4, business_info)
        
        await message.answer("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! üéâ")

        pdf_path = Path(__file__).parent / "guide.pdf"
        if pdf_path.exists():
            pdf_file = FSInputFile(pdf_path)
            await message.answer_document(pdf_file)
        else:
            await message.answer("–§–∞–π–ª guide.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω. üò¢")
        
        conversion_sheet = setup_google_sheets(1)
        update_conversion_sheet(conversion_sheet, argument, "info_sent")
        
        await send_new_application_to_admin(sheet)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_business_info: {e}")  # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}", parse_mode="HTML")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_new_application_to_admin(sheet):
    try:
        all_values = sheet.get_all_values()
        if len(all_values) > 1:
            last_row = all_values[-1]
            application_id = last_row[0]
            argument = last_row[2]
            description = last_row[3] if len(last_row) > 2 else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            message = f"–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê\nID: {application_id}\nARG: {argument}\nDESCRIPTION: {description}"
            await bot.send_message(ADMIN_ID, message, parse_mode="HTML")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_new_application_to_admin: {e}")  # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def reg_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=['start']))
    dp.callback_query.register(process_registration_callback, F.data == "register")
    dp.message.register(process_contact, F.contact, Form.waiting_for_contact)
    dp.message.register(process_business_info, Form.waiting_for_business_info)